#!/usr/bin/env bash

#Configuration
readonly interface=virbr-nat            #Virtual interface which is going to be used by VM
readonly mac_add=52:54:00:4b:7d:a3      #Randomly chosen mac address
readonly ip_cidr=192.168.100.1/24       #IP for virtual interface 
readonly ip_broad=192.168.100.255       #Broadcast address for the network
readonly ruleset_path=$HOME/libvirt-networking-nft-script/rules
readonly ruleset=vm_nat_network.nft
readonly baseline_ruleset=baseline.nft

#Programs
IP=/bin/ip
SYSTEMCTL=/bin/systemctl
EGREP=/bin/egrep
NFT=/usr/sbin/nft

##################################
######Bringing network UP#########

_iface_up () {
	
	#Bring actual network interface up
	printf "Bringing %s interface UP" $interface
	"$IP" link add "$interface" type bridge
	"$IP" link set "$interface" address "$mac_add"
	"$IP" address add "$ip_cidr" dev "$interface" broadcast "$ip_broad"
	printf "\t\t\t[OK]\n"
	
	#Bring up DNSmasq service for the network
	printf "Enabling DNSmasq service for %s" $interface
	"$SYSTEMCTL" enable dnsmasq@"$interface".service > /dev/null 2>&1
	"$SYSTEMCTL" start dnsmasq@"$interface".service > /dev/null 2>&1
	printf "\t\t[OK]\n"
	
	#Add firewall rules to IPtables
	printf "Adding firewall rules for network."
	"$NFT" -f "$ruleset_path/$ruleset" 	
	printf "\t\t[OK]\n"

}


##################################
######Bringing network DOWN#######

_iface_down () {
	
	#Bring up DNSmasq service for the network
	printf "Disabling DNSmasq service for %s" $interface
	"$SYSTEMCTL" stop dnsmasq@"$interface".service > /dev/null 2>&1
	"$SYSTEMCTL" disable dnsmasq@"$interface".service > /dev/null 2>&1
	printf "\t\t[OK]\n"

	#Bring network interface down
	printf "Bringing %s interface down" $interface
	"$IP" link set "$interface" down && "$IP" link delete "$interface";
	printf "\t\t[OK]\n"
	
	#Remove firewall rules to disable network activity
	printf "Cleaning up firewall rules"
	"$NFT" flush ruleset
	"$NFT" -f "$ruleset_path/$baseline_ruleset"
	printf "\t\t\t[OK]\n"

	}


##################################
#########Execute scrIPt###########

if [[ $EUID -gt 0 ]]; then
	printf "ScrIPt must be run as root. Exiting\n"
	exit 1;
fi

USAGE="Usage: set_nat up/down"
if [[ "$#" -ne 1 ]]; then
	printf "%s\n" "$usage"
	exit 1
fi 

case "$1" in
	up)
		if $"IP" link show | "$EGREP" "$interface" > /dev/null; then
			printf "Interface already up, exiting.\n"
			exit 0
		else
			_iface_up && "$IP" link set dev "$interface" up;
			printf "Interface %s successfully enabled.\n" $interface
			exit 0
		fi
		;;
	down)
		if "$IP" link show | "$EGREP" "$interface" > /dev/null; then
			_iface_down;
			printf "Interface %s successfully disabled.\n" $interface
			exit 0
		else
			printf "There is no interface to disable, exiting\n"
			exit 0
		fi
		;;
	*)
		printf "Error. Needs argument to be \"up\" or \"down\".\n%s\n" "$usage"
		exit 1
		;;
esac
